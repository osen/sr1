#ifndef STD_SR1_WEAKPTR
#define STD_SR1_WEAKPTR

#include "shared_ptr"

namespace std
{

namespace sr1
{

#ifdef STD_SR1_DEBUG

template <typename T>
class weak_ptr
{
public:
  weak_ptr() { }

  weak_ptr& operator=(const weak_ptr& other)
  {
    aquire(other.ptr, other.ref);

    return *this;
  }

  weak_ptr(const weak_ptr& copy)
  {
    operator=(copy);
  }

  template <typename U>
  weak_ptr& operator=(const weak_ptr<U>& other)
  {
    aquire(other.ptr, other.ref);

    return *this;
  }

  template <typename U>
  weak_ptr(const weak_ptr<U>& copy)
  {
    operator=(copy);
  }

  template <typename U>
  weak_ptr& operator=(const shared_ptr<U>& other)
  {
    aquire(other.ptr, other.ref);

    return *this;
  }

  template <typename U>
  weak_ptr(const shared_ptr<U>& copy)
  {
    operator=(copy);
  }

  ~weak_ptr()
  {
    reset();
  }

  long use_count()
  {
    if(!ref) return 0;

    return ref.data()->shared;
  }

  shared_ptr<T> lock() const
  {
    shared_ptr<T> rtn;

    if(ref)
    {
      if(ref.data()->shared)
      {
        rtn.aquire(ptr, ref);
      }
    }

    return rtn;
  }

  void reset()
  {
    if(!ref)
    {
      return;
    }

    ref.data()->weak--;

    if(ref.data()->weak < 1)
    {
      if(ref.data()->shared < 1)
      {
        delete ref;
      }
    }

    ptr = NULL;
    ref = NULL;
  }

private:
  template <typename R>
  friend class shared_ptr;

  template <typename R>
  friend class weak_ptr;

  template <typename U>
  friend struct observer_ptr;

  zero_initialized<T*> ptr;
  zero_initialized<shared_ptr_refcount*> ref;

  void aquire(T* ptr, shared_ptr_refcount *ref)
  {
    if(ref)
    {
      ref->weak++;
    }

    reset();
    this->ptr = ptr;
    this->ref = ref;
  }
};

#else

using std::weak_ptr;
using std::make_shared;

#endif

}

}

#endif
